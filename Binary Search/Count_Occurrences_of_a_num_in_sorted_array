
class Solution
{
public:
    int firstOcc(vector<int> &arr, int n, int k)
    {
        int low = 0, high = n - 1;
        int first = -1;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (arr[mid] == k)
            {
                first = mid;
                high = mid - 1;
            }
            else if (arr[mid] < k)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return first;
    }
    int lastOcc(vector<int> &arr, int n, int k)
    {
        int low = 0, high = n - 1;
        int last = -1;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (arr[mid] == k)
            {
                last = mid;
                low = mid + 1;
            }
            else if (arr[mid] < k)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return last;
    }
    pair<int, int> searchRange(vector<int> &arr, int n, int k)
    {
        int first = firstOcc(arr, n, k);
        if (first == -1)
            return {-1, -1};
        int last = lastOcc(arr, n, k);
        return {first, last};
    }
int count(vector&arr,int n,int x){
pair<int,int> ans=searchRange(arr,n,x);
if(ans.first==-1) return 0;
return ans.second-ans.first+1;
}
};
